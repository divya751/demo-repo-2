AWSTemplateFormatVersion: 2010-09-09
Description: >-
  A Bastion host in a public subnet to allow SSH-ing into servers in a VPC. Use
  with caution.

Parameters:
  BastionInstanceType:
    AllowedValues:
      - t2.nano
      - t2.micro
    Default: t2.micro
    Description: Amazon EC2 instance type for the bastion instances
    Type: String
  KeyName:
    Description: Public/private key pair in this region
    Type: 'AWS::EC2::KeyPair::KeyName'
  RemoteAccessCIDR:
    Description: >-
      CIDR block of hosts allowed to connect to the Bastion over SSH. Defaults
      to only allowing access from within the Tine network.
    Type: String
    Default: '193.213.209.1/32'
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x

Mappings:
  AWSAMIRegionMap:
    AMI:
      AmazonLinuxHVM: amzn-ami-hvm-2017.09.0.20170930-x86_64-gp2
    eu-west-1:
      AmazonLinuxHVM: ami-acd005d5

Resources:
  BastionMainLogGroup:
    Type: 'AWS::Logs::LogGroup'
  SSHMetricFilter:
    Type: 'AWS::Logs::MetricFilter'
    Properties:
      LogGroupName: !Ref BastionMainLogGroup
      FilterPattern: ON FROM USER PWD
      MetricTransformations:
        - MetricName: SSHCommandCount
          MetricValue: 1
          MetricNamespace: !Ref 'AWS::StackName'
  BastionHostRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 's3:GetObject'
                Resource: !Sub
                  - 'arn:aws:s3:::${BucketName}/bastion/*'
                  - BucketName: !ImportValue InfrastructureBucketName
                Effect: Allow
          PolicyName: bastion-s3-policy
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 'logs:CreateLogStream'
                  - 'logs:GetLogEvents'
                  - 'logs:PutLogEvents'
                  - 'logs:DescribeLogGroups'
                  - 'logs:DescribeLogStreams'
                  - 'logs:PutRetentionPolicy'
                  - 'logs:PutMetricFilter'
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${BastionMainLogGroup}:*'
                Effect: Allow
          PolicyName: bastion-cloudwatch-logs-policy
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Principal:
              Service:
                - ec2.amazonaws.com
            Effect: Allow
        Version: 2012-10-17
  BastionHostProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
        - !Ref BastionHostRole
      Path: /
  BastionSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enables SSH Access to Bastion Hosts
      VpcId: !ImportValue VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref RemoteAccessCIDR
  BastionInstance:
    Type: 'AWS::EC2::Instance'
    Metadata:
      'AWS::CloudFormation::Authentication':
        S3AccessCreds:
          type: S3
          roleName: !Ref BastionHostRole
          buckets:
            - !ImportValue InfrastructureBucketName
      'AWS::CloudFormation::Init':
        config:
          files:
            /tmp/bastion_bootstrap.sh:
              source: !Sub
                - 'https://${BucketName}.s3.amazonaws.com/bastion/bootstrap.sh'
                - BucketName: !ImportValue InfrastructureBucketName
              mode: '000550'
              owner: root
              group: root
              authentication: S3AccessCreds
            /etc/ssh_banner:
              source: !Sub
                - 'https://${BucketName}.s3.amazonaws.com/bastion/banner.txt'
                - BucketName: !ImportValue InfrastructureBucketName
              mode: '000640'
              owner: root
              group: root
              authentication: S3AccessCreds
          commands:
            b-bootstrap:
              command: !Join
                - ''
                - - './tmp/bastion_bootstrap.sh'
                  - ' --tcp-forwarding true'
                  - ' --x11-forwarding false'
    Properties:
      IamInstanceProfile: !Ref BastionHostProfile
      ImageId: !FindInMap [AWSAMIRegionMap, !Ref 'AWS::Region', 'AmazonLinuxHVM']
      KeyName: !Ref KeyName
      InstanceType: !Ref BastionInstanceType
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeleteOnTermination: true
          DeviceIndex: 0
          SubnetId: !ImportValue PublicSubnetAZA
          GroupSet:
            - !Ref BastionSecurityGroup
      Tags:
        - Key: 'Name'
          Value: 'BastionServer'
      UserData: !Base64
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash
            - |
              yum update -y
            - |
              export PATH=$PATH:/usr/local/bin
            - |
              which pip &> /dev/null
            - |
              if [ $? -ne 0 ] ; then
            - |2
                  echo "PIP NOT INSTALLED"
            - |2
                  [ `which yum` ] && $(yum install -y epel-release; yum install -y python-pip) && echo "PIP INSTALLED"
            - |2
                  [ `which apt-get` ] && apt-get -y update && apt-get -y install python-pip && echo "PIP INSTALLED"
            - |
              fi
            - |
              pip install --upgrade pip &> /dev/null
            - |
              pip install awscli --ignore-installed six &> /dev/null
            - >
              easy_install
              https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
            - CLOUDWATCHGROUP=
            - !Ref BastionMainLogGroup
            - |+

            - 'cfn-init -v --stack '
            - !Ref 'AWS::StackName'
            - ' --resource BastionInstance --region '
            - !Ref 'AWS::Region'
            - |+

            - 'cfn-signal -e $? --stack '
            - !Ref 'AWS::StackName'
            - ' --resource BastionInstance --region '
            - !Ref 'AWS::Region'
            - |+

Outputs:
  SSHCommand:
    Value: !Sub
      - 'ssh -i bastion-key ec2-user@${IP}'
      - IP: !GetAtt BastionInstance.PublicIp
    Description: SSH command to enter instance
  BastionPublicIP:
    Value: !GetAtt BastionInstance.PublicIp
    Description: Public IP of bastion instance
  BastionPrivateIP:
    Value: !GetAtt BastionInstance.PrivateIp
    Description: Private IP of bastion instance
